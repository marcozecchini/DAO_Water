extends layout

block content
    h1 Make your proposal
    p Realize your proposal to create a smart contract to be voted.
    br
    label(for='who_id') Who:
    br
    input#who_id(list='who' name="who_id")
    br
    label(for='modes_id') Mode:
    br
    input#modes_id(list='modes' name="modes_id")
    br
    label(for='incentives_id') Incetive types:
    br
    input#incentives_id(list='incentive' name="incentives_id")
    br
    label(for='periods_id') Period of measurements:
    br
    input#periods_id(list='periods' name="periods_id")
    br
    br
    button(onclick='deploy_and_propose()') Invia
    br
    hr


    datalist#who
        option(value="Home")
        option(value="Block")
        option(value="Neighbour")

    datalist#modes
        option(value="LessThan")
        option(value="LessPossible")

    datalist#incentive
        option(value="First")
        option(value="WhoIsUnder")
        option(value="WhoIsUnderPercentage")

    datalist#periods
        option(value="Month")
        option(value="Trimester")
        option(value="Semester")


    script(src="javascripts/deploy.js")
    script(src="javascripts/util.js")
    script.
        if (typeof web3 !== 'undefined') {
            web3 = new Web3(web3.currentProvider);
        } else {
            web3 = new Web3(new Web3.providers.HttpProvider("http://localhost:8545"));
            web3.eth.defaultAccount = web3.eth.accounts[1];
        }

        var abi = JSON.parse('!{proposal_abi}'); //[ { "constant": false, "inputs": [ { "name": "_newOwner", "type": "address" } ], "name": "changeOwner", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function" }, { "constant": false, "inputs": [], "name": "changeStageToRunning", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function" }, { "constant": false, "inputs": [], "name": "changeStageToSelecting", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function" }, { "constant": false, "inputs": [], "name": "getOwner", "outputs": [ { "name": "_owner", "type": "address" } ], "payable": false, "stateMutability": "nonpayable", "type": "function" }, { "constant": false, "inputs": [ { "name": "_who", "type": "uint8" }, { "name": "_mode", "type": "uint8" }, { "name": "_incentive", "type": "uint8" }, { "name": "_period", "type": "uint8" }, { "name": "_address", "type": "address" } ], "name": "Propose", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function" }, { "constant": false, "inputs": [], "name": "runContract", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function" }, { "inputs": [], "payable": false, "stateMutability": "nonpayable", "type": "constructor" }, { "payable": true, "stateMutability": "payable", "type": "fallback" }, { "anonymous": false, "inputs": [ { "indexed": false, "name": "proposer", "type": "address" }, { "indexed": false, "name": "_who", "type": "uint8" }, { "indexed": false, "name": "_mode", "type": "uint8" }, { "indexed": false, "name": "_incentive", "type": "uint8" }, { "indexed": false, "name": "_period", "type": "uint8" } ], "name": "SubmitProposal", "type": "event" }, { "anonymous": false, "inputs": [ { "indexed": false, "name": "_newOwner", "type": "address" } ], "name": "OwnerChanged", "type": "event" }, { "anonymous": false, "inputs": [ { "indexed": false, "name": "_contract", "type": "address" }, { "indexed": false, "name": "stage", "type": "uint8" } ], "name": "StageChanged", "type": "event" }, { "constant": true, "inputs": [], "name": "incentive", "outputs": [ { "name": "", "type": "uint8" } ], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": true, "inputs": [], "name": "mode", "outputs": [ { "name": "", "type": "uint8" } ], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": true, "inputs": [], "name": "owner", "outputs": [ { "name": "", "type": "address" } ], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": true, "inputs": [], "name": "period", "outputs": [ { "name": "", "type": "uint8" } ], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": true, "inputs": [], "name": "stage", "outputs": [ { "name": "", "type": "uint8" } ], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": true, "inputs": [], "name": "who", "outputs": [ { "name": "", "type": "uint8" } ], "payable": false, "stateMutability": "view", "type": "function" } ];
        var bytecode = "#{proposal_bytecode}";
        var man_address = "#{manager_address}";
        var or_address = "#{oracle_address}"
        //console.log(!{manager_address}.toString());
        var ProposalContract = null;
        function deploy_and_propose() {

            var who = 0;
            var mode = 0;
            var incentive = 0;
            var period = 0;

            switch (document.getElementById("who_id").value) {
                case "Home":
                    break;
                case "Block":
                    who = 1;
                    break;
                case "Neighbour":
                    who = 2;
                    break;
            }
            if (document.getElementById("modes_id").value === "LessPossible")
                mode = 1;

            switch (document.getElementById("incentives_id").value) {
                case "First":
                    break;
                case "WhoIsUnder":
                    incentive = 1;
                    break;
                case "WhoIsUnderPercentage":
                    incentive = 2;
                    break;
            }

            switch (document.getElementById("periods_id").value) {
                case "Month":
                    break;
                case "Trimester":
                    period = 1;
                    break;
                case "Semester":
                    period = 2;
                    break;
            }
            deploy(bytecode, function (err, myContract){
                web3.eth.contract(abi).at(myContract.address, function (err, proposalContract) {
                    if (err) console.log(err);
                    else{
                        ProposalContract = proposalContract;
                        console.log("Calling Propose on ProposalContract...");
                        var callData = ProposalContract.Propose.getData(who,mode,incentive,period,man_address);
                        console.log(callData);
                        estimateGas(ProposalContract.address,callData, function(err, gasEstimated){
                            proposalContract.Propose(who, mode, incentive, period, man_address, {gas: gasEstimated}, {}, function (err, res) {
                                if (err) console.log(err);
                                else {
                                    console.log("Changing the owner ...");
                                    var callData = ProposalContract.changeOwner.getData(man_address);
                                    estimateGas(ProposalContract.address, callData, function (err, gasEstimated) {
                                        proposalContract.changeOwner(man_address, {gas: gasEstimated}, {}, function (err, res) {
                                            if (err) console.log(err);
                                            else {
                                                console.log("New owner is: " + man_address);
                                                var callData = ProposalContract.addWaterOracle.getData(or_address);
                                                estimateGas(ProposalContract.address, callData, function (err, gasEstimated) {
                                                    proposalContract.addWaterOracle(or_address, {}, {}, function (err, res) {
                                                        if (err) console.log(err);
                                                    });
                                                });
                                            }
                                        });
                                    });
                                }
                            });
                        });
                    }
                });
            });
        }





