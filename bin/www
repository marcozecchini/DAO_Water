#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('dao:server');
var http = require('http');
var deploy = require('../scripts/deploy_smartcontracts');

//var Web3 = require('web3');
//var web3 = new Web3(new Web3.providers.HttpProvider("http://localhost:8545"));
//web3.eth.defaultAccount = web3.eth.accounts[0];

//Infura HttpProvider Endpoint eventually
//var web3 = new Web3(new Web3.providers.HttpProvider("https://ropsten.infura.io/v3/ccc3eb1d8553434d8d89bdd6ccf12a6a"));
//web3.eth.defaultAccount = web3.eth.accounts[0];
/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '8000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
/**
 * Create ManagerContract and ProposalContract
 */

var myManager = deploy.compile("Contracts.sol", "ManagerContract");
var myProposal = deploy.compile("Contracts.sol", "ProposalContract");
var oracleAbi = deploy.compile("Contracts.sol","WaterOracle");
exports.ManagerCompile = myManager[0];
exports.ManagerAbi = myManager[1];
exports.ProposalCompile = myProposal[0];
exports.ProposalAbi = myProposal[1];
exports.oracleAbi = oracleAbi[1];

//TWO WAY
//FIRST WAY - HERE I DO THE COMPILE AND THE DEPLOY, ON SINGLE NODE ETHEREUM
/*var myContract = deploy.deploy("Contracts.sol", "ManagerContract", web3.eth.accounts[0]);
var address = myContract.address;
exports.ManagerContract = deploy.retrieve("ManagerContract", address);*/

// SECOND MODEL - I DEPLOY IT ON REMIX AND THEN I ADD THE ADDRESS HERE
exports.ManagerContractAddress = "0x24c5cfadfb1df6584ff41dccef7a6a8373c98bb6";
exports.WaterOracleAddress = "0xd7c2b513c1ff5faca329bce5aaf561f9e7c39c1f";
exports.proposals = [];
var timeoutInterval = 120*1000;
exports.startedVote = false;
setTimeout(startTheVote, timeoutInterval );

function startTheVote(){
  /*var ManagerContract = deploy.retrieve("ManagerContract", address);
  ManagerContract.startVote();*/
  exports.startedVote = true;
  console.log("Vote Started");
}

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
